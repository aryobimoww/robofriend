{"version":3,"sources":["reportWebVitals.js","Components/SearchBox.js","Components/Card.js","Components/CardList.js","Components/Scroll.js","Components/ErrorBoundary.js","constants.js","Containers/App.js","actions.js","reducer.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","CardList","robots","map","user","i","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","console","log","playload","fetch","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ccc42680.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b--light-blue bg-lightest-blue'\r\n\t\ttype='search' \r\n\t\tplaceholder='search robo'\r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-washed-green dib br5 pa3 ma3 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?150x150`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p> \r\n\t\t\t</div>\r\n\t</div> \r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\nreturn(\r\n\t<div>\r\n\t\t{robots.map((user,i)=>{\r\n\t\t\treturn (\r\n\t\t\t\t<Card\r\n\t\t\t\tkey={i}\r\n\t\t\t\tid={robots[i].id}\r\n\t\t\t\tname={robots[i].name}\r\n\t\t\t\temail={robots[i].email}\r\n\t\t\t\t/> \r\n\t\t\t)\r\n\t\t})}\r\n\t</div>\r\n);\r\n}\r\n\r\nexport default CardList;","import React from'react';\r\n\r\n\r\nconst Scroll = (props)=>{\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\nconstructor(props){\r\n\tsuper(props);\r\n\tthis.state = {\r\n\t\thasError: false\r\n\t};\r\n}\r\ncomponentDidCatch(error,info){\r\n\tthis.setState({hasError: true})\r\n}\r\n\r\nrender() {\r\n\tif(this.state.hasError){\r\n\t\treturn <h1>Ooops Error</h1>\r\n\t}\r\n\treturn this.props.children\r\n\r\n}\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDDING = 'REQUEST_ROBOTS_PENDDING'\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCSESS'\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import React,{Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SearchBox from '../Components/SearchBox'\r\nimport CardList from '../Components/CardList'\r\nimport { robots } from '../robots';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport {requestRobots, setSearchField} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn{\r\n\tonSearchChange:(event) => dispatch(setSearchField(event.target.value)),\t\r\n\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\t\r\n}\r\n\r\nclass App extends Component {\r\n\t// constructor(){\r\n\t// \tsuper()\r\n\t// \tthis.state = {\r\n\t// \t\trobots: []\r\n\t// \t}\r\n\t// }\r\n\r\n\t// const [searchfield,setSearchfield] = useState('')\r\n\r\n\tcomponentDidMount(){\r\n\tthis.props.onRequestRobots();\r\n\t}\r\n\t\t// \tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t// \t.then(response => response.json())\r\n\t// \t.then(users => {this.setState({robots:users})});\r\n\t// }\r\n\r\n\t\r\n\t//  onSearchChange = (event)=> {\r\n\t// \tsetSearchfield(event.target.value)\r\n\t// }\r\n\r\n\t\r\n\t\r\n\r\n\t\r\n\trender(){\r\n\t\tconst {searchField,onSearchChange, isPending, robots} = this.props;\r\n\t\tconst filterRobots =  robots.filter(robot =>{\r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t\t  })\r\n\t\t\r\n\t\treturn isPending ?\r\n\t\t<h1>Loading</h1>\r\n\t:\r\n\t\t (\r\n\t\t<div className='tc'>\r\n\t\t<h1 className='f2'>RoboFriends</h1>\r\n\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t<Scroll>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<CardList robots={filterRobots}/>\r\n\t\t\t</ErrorBoundary>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n     CHANGE_SEARCH_FIELD,\r\n     REQUEST_ROBOTS_PENDDING,\r\n     REQUEST_ROBOTS_SUCCESS,\r\n     REQUEST_ROBOTS_FAILED \r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => {\r\n    console.log(text);\r\n    return{\r\n        type: CHANGE_SEARCH_FIELD,\r\n        playload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, playload:data}))\r\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, playload:error}))\r\n}","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch ={\r\n    searchField:'',\r\n\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.playload})\r\n        default:\r\n            return state;\r\n    }\r\n} \r\n\r\nconst initialStateRobots = {\r\n    isPending:false,\r\n    robots:[],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDDING:\r\n            return Object.assign({},state, {isPending:true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{robots: action.playload, isPending:false});\r\n         case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error:action.playload, isPending:false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport  thunkMiddleware  from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport {createLogger} from 'redux-logger'\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './Containers/App';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducer';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(\n<Provider store={store}>\n<App/>\n</Provider>,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}