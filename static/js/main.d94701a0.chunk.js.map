{"version":3,"sources":["Components/SearchBox.js","Components/Card.js","Components/CardList.js","Components/Scroll.js","Components/ErrorBoundary.js","constants.js","Containers/App.js","actions.js","reducer.js","serviceWorker.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","CardList","robots","map","user","i","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","console","log","playload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d94701a0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b--light-blue bg-lightest-blue'\r\n\t\ttype='search' \r\n\t\tplaceholder='search robo'\r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-washed-green dib br5 pa3 ma3 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?150x150`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p> \r\n\t\t\t</div>\r\n\t</div> \r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\nreturn(\r\n\t<div>\r\n\t\t{robots.map((user,i)=>{\r\n\t\t\treturn (\r\n\t\t\t\t<Card\r\n\t\t\t\tkey={i}\r\n\t\t\t\tid={robots[i].id}\r\n\t\t\t\tname={robots[i].name}\r\n\t\t\t\temail={robots[i].email}\r\n\t\t\t\t/> \r\n\t\t\t)\r\n\t\t})}\r\n\t</div>\r\n);\r\n}\r\n\r\nexport default CardList;","import React from'react';\r\n\r\n\r\nconst Scroll = (props)=>{\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\nconstructor(props){\r\n\tsuper(props);\r\n\tthis.state = {\r\n\t\thasError: false\r\n\t};\r\n}\r\ncomponentDidCatch(error,info){\r\n\tthis.setState({hasError: true})\r\n}\r\n\r\nrender() {\r\n\tif(this.state.hasError){\r\n\t\treturn <h1>Ooops Error</h1>\r\n\t}\r\n\treturn this.props.children\r\n\r\n}\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDDING = 'REQUEST_ROBOTS_PENDDING'\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCSESS'\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import React,{Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SearchBox from '../Components/SearchBox'\r\nimport CardList from '../Components/CardList'\r\nimport { robots } from '../robots';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport {requestRobots, setSearchField} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn{\r\n\tonSearchChange:(event) => dispatch(setSearchField(event.target.value)),\t\r\n\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\t\r\n}\r\n\r\nclass App extends Component {\r\n\t// constructor(){\r\n\t// \tsuper()\r\n\t// \tthis.state = {\r\n\t// \t\trobots: []\r\n\t// \t}\r\n\t// }\r\n\r\n\t// const [searchfield,setSearchfield] = useState('')\r\n\r\n\tcomponentDidMount(){\r\n\tthis.props.onRequestRobots();\r\n\t}\r\n\t\t// \tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t// \t.then(response => response.json())\r\n\t// \t.then(users => {this.setState({robots:users})});\r\n\t// }\r\n\r\n\t\r\n\t//  onSearchChange = (event)=> {\r\n\t// \tsetSearchfield(event.target.value)\r\n\t// }\r\n\r\n\t\r\n\t\r\n\r\n\t\r\n\trender(){\r\n\t\tconst {searchField,onSearchChange, isPending, robots} = this.props;\r\n\t\tconst filterRobots =  robots.filter(robot =>{\r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t\t  })\r\n\t\t\r\n\t\treturn isPending ?\r\n\t\t<h1>Loading</h1>\r\n\t:\r\n\t\t (\r\n\t\t<div className='tc'>\r\n\t\t<h1 className='f2'>RoboFriends</h1>\r\n\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t<Scroll>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<CardList robots={filterRobots}/>\r\n\t\t\t</ErrorBoundary>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n     CHANGE_SEARCH_FIELD,\r\n     REQUEST_ROBOTS_PENDDING,\r\n     REQUEST_ROBOTS_SUCCESS,\r\n     REQUEST_ROBOTS_FAILED \r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => {\r\n    console.log(text);\r\n    return{\r\n        type: CHANGE_SEARCH_FIELD,\r\n        playload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, playload:data}))\r\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, playload:error}))\r\n}","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch ={\r\n    searchField:'',\r\n\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.playload})\r\n        default:\r\n            return state;\r\n    }\r\n} \r\n\r\nconst initialStateRobots = {\r\n    isPending:false,\r\n    robots:[],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDDING:\r\n            return Object.assign({},state, {isPending:true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{robots: action.playload, isPending:false});\r\n         case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error:action.playload, isPending:false});\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport  thunkMiddleware  from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport {createLogger} from 'redux-logger'\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './Containers/App';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducer';\nimport * as serviceWorker from './serviceWorker'; \n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(\n<Provider store={store}>\n<App/>\n</Provider>,document.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.register();\n"],"sourceRoot":""}